<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attacked = false;
max_hp = 20;
hp = 10;
joystick_prev[1] = false;
joystick_prev[2] = false;
joystick_prev[3] = false;
joystick_prev[4] = false;
joystick_prev[5] = false;
joystick_prev[6] = false;
joystick_prev[7] = false;
joystick_prev[8] = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xmot, ymot, movedx;

xmot = x;
ymot = y;
movedx = false;
if(keyboard_check(ord('A')) || (joystick_xpos(1) &lt; -global.deadzone &amp;&amp; abs(joystick_xpos(1)) &gt; abs(joystick_ypos(1))) || joystick_xpos(1) &lt; -.5 || abs(joystick_pov(1) - 270) &lt; 46)
    xmot -= 16;
if(keyboard_check(ord('W')) || (joystick_ypos(1) &lt; -global.deadzone &amp;&amp; abs(joystick_ypos(1)) &gt; abs(joystick_xpos(1))) || joystick_ypos(1) &lt; -.5 || ((abs(joystick_pov(1)) &lt; 46 &amp;&amp; joystick_pov(1) != -1)||abs(joystick_pov(1) - 360) &lt; 46))
    ymot -= 16;
if(keyboard_check(ord('D')) || (joystick_xpos(1) &gt; global.deadzone &amp;&amp; abs(joystick_xpos(1)) &gt; abs(joystick_ypos(1))) || joystick_xpos(1) &gt; .5 || abs(joystick_pov(1) - 90) &lt; 46)
    xmot += 16;
if(keyboard_check(ord('S')) || (joystick_ypos(1) &gt; global.deadzone &amp;&amp; abs(joystick_ypos(1)) &gt; abs(joystick_xpos(1))) || joystick_ypos(1) &gt; .5 || abs(joystick_pov(1) - 180) &lt; 46)
    ymot += 16;

if(xmot==x&amp;&amp;ymot==y&amp;&amp;!attacked)
    hp+=1;
    
if(place_free(xmot, y)) {
    x = xmot;
    movedx = true; }
if(place_free(x, ymot))
    y = ymot;
if(place_free(xmot, y) &amp;&amp; !movedx)
    x = xmot;
    show_debug_message(string(xmot==x)+string(ymot==y)+string(!attacked));

attacked = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i, attack_strength, optimum_attack_time;

//hp regen
hp += 1/60;
if(hp &gt; max_hp)
    hp = max_hp;

optimum_attack_time = (room_speed - obj_timekeeper.difficulty) / 2;
attack_strength = max(1 - (abs(optimum_attack_time - obj_timekeeper.alarm[0])) / optimum_attack_time, 0.25) * max_hp / 10;

if(!attacked) {
    if(keyboard_check_pressed(vk_down) || (joystick_check_button(1, global.greenbutton) &amp;&amp; !joystick_prev[1])) {
        if(ds_list_find_value(obj_timekeeper.attackList, obj_timekeeper.attackListIndex) == 0)
            attack_strength *= 2;
        effect_create_below(ef_spark, x, y + 8, attack_strength, c_lime);
        audio_play_sound(snd_greenbeat, 1, false);
        if(place_meeting(x, y + 16, obj_enemyparent))
            with(instance_position(x, y + 16, obj_enemyparent)) {
                if(object_index == obj_enemyblue)
                    hp -= attack_strength;
                hp -= attack_strength; }
        attacked = true; }
    else if(keyboard_check(vk_down) || joystick_check_button(1, global.greenbutton) &amp;&amp; obj_timekeeper.alarm[0] == optimum_attack_time) {
        attack_strength = 0.25;
        if(ds_list_find_value(obj_timekeeper.attackList, obj_timekeeper.attackListIndex) == 0)
            attack_strength *= 2;
        effect_create_below(ef_spark, x, y + 8, attack_strength, c_lime);
        audio_play_sound(snd_greenbeat, 1, false);
        if(place_meeting(x, y + 16, obj_enemyparent))
            with(instance_position(x, y + 16, obj_enemyparent)) {
                if(object_index == obj_enemyblue)
                    hp -= attack_strength;
                hp -= attack_strength; }
        attacked = true; }
    else if(keyboard_check_pressed(vk_left) || (joystick_check_button(1, global.bluebutton) &amp;&amp; !joystick_prev[3])) {
        if(ds_list_find_value(obj_timekeeper.attackList, obj_timekeeper.attackListIndex) == 1)
            attack_strength *= 2;
        effect_create_below(ef_spark, x - 8, y, attack_strength, c_blue);
        audio_play_sound(snd_bluebeat, 1, false);
        if(place_meeting(x - 16, y, obj_enemyparent))
            with(instance_position(x - 16, y, obj_enemyparent)) {
                if(object_index == obj_enemyyellow)
                    hp -= attack_strength;
                hp -= attack_strength; }
        attacked = true; }
    else if(keyboard_check(vk_left) || joystick_check_button(1, global.bluebutton) &amp;&amp; obj_timekeeper.alarm[0] == optimum_attack_time) {
        attack_strength = 0.25;
        if(ds_list_find_value(obj_timekeeper.attackList, obj_timekeeper.attackListIndex) == 1)
            attack_strength *= 2;
        effect_create_below(ef_spark, x - 8, y, attack_strength, c_blue);
        audio_play_sound(snd_bluebeat, 1, false);
        if(place_meeting(x - 16, y, obj_enemyparent))
            with(instance_position(x - 16, y, obj_enemyparent)) {
                if(object_index == obj_enemyyellow)
                    hp -= attack_strength;
                hp -= attack_strength; }
        attacked = true; }
    else if(keyboard_check_pressed(vk_up) || (joystick_check_button(1, global.yellowbutton) &amp;&amp; !joystick_prev[4])) {
        if(ds_list_find_value(obj_timekeeper.attackList, obj_timekeeper.attackListIndex) == 3)
            attack_strength *= 2;
        effect_create_below(ef_spark, x, y - 8, attack_strength, c_yellow);
        audio_play_sound(snd_yellowbeat, 1, false);
        if(place_meeting(x, y - 16, obj_enemyparent))
            with(instance_position(x, y - 16, obj_enemyparent)) {
                if(object_index == obj_enemyred)
                    hp -= attack_strength;
                hp -= attack_strength; }
        attacked = true; }
    else if(keyboard_check(vk_up) || joystick_check_button(1, global.yellowbutton) &amp;&amp; obj_timekeeper.alarm[0] == optimum_attack_time) {
        attack_strength = 0.25;
        if(ds_list_find_value(obj_timekeeper.attackList, obj_timekeeper.attackListIndex) == 3)
            attack_strength *= 2;
        effect_create_below(ef_spark, x, y - 8, attack_strength, c_yellow);
        audio_play_sound(snd_yellowbeat, 1, false);
        if(place_meeting(x, y - 16, obj_enemyparent))
            with(instance_position(x, y - 16, obj_enemyparent)) {
                if(object_index == obj_enemyred)
                    hp -= attack_strength;
                hp -= attack_strength; }
        attacked = true; }
    else if(keyboard_check_pressed(vk_right) || (joystick_check_button(1, global.redbutton) &amp;&amp; !joystick_prev[2])) {
        if(ds_list_find_value(obj_timekeeper.attackList, obj_timekeeper.attackListIndex) == 2)
            attack_strength *= 2;
        effect_create_below(ef_spark, x + 8, y, attack_strength, c_red);
        audio_play_sound(snd_redbeat, 1, false);
        if(place_meeting(x + 16, y, obj_enemyparent))
            with(instance_position(x + 16, y, obj_enemyparent)) {
                if(object_index == obj_enemygreen)
                    hp -= attack_strength;
                hp -= attack_strength; }
        attacked = true; }
    else if(keyboard_check(vk_right) || joystick_check_button(1, global.redbutton) &amp;&amp; obj_timekeeper.alarm[0] == optimum_attack_time) {
        attack_strength = 0.25;
        if(ds_list_find_value(obj_timekeeper.attackList, obj_timekeeper.attackListIndex) == 2)
            attack_strength *= 2;
        effect_create_below(ef_spark, x + 8, y, attack_strength, c_red);
        audio_play_sound(snd_redbeat, 1, false);
        if(place_meeting(x + 16, y, obj_enemyparent))
            with(instance_position(x + 16, y, obj_enemyparent)) {
                if(object_index == obj_enemygreen)
                    hp -= attack_strength;
                hp -= attack_strength; }
        attacked = true; } }

if(joystick_exists(1)) {
    for(i = 1; i &lt;= joystick_buttons(1); i++;)
        joystick_prev[i] = joystick_check_button(1, i); }
    
if(hp &lt;= 0) {
    with(obj_timekeeper)
        instance_destroy(); 
    room_goto_next(); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_set_color(c_green);
draw_rectangle(8, 8, 624 * hp / max_hp + 8, 16, false);
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
