<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_darkness</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

bossDifficulty = obj_timekeeper.difficulty / 4;//?
slavesReferenceList[0] = obj_slaveyellow;
slavesReferenceList[3] = obj_slaveblue;
slavesReferenceList[2] = obj_slavegreen;
slavesReferenceList[1] = obj_slavered;
slavesList = ds_list_create();
ds_list_add(slavesList, instance_create(x - 16, y, slavesReferenceList[3]));
ds_list_add(slavesList, instance_create(x + 16, y, slavesReferenceList[1]));
ds_list_add(slavesList, instance_create(x, y - 16, slavesReferenceList[0]));
ds_list_add(slavesList, instance_create(x, y + 16, slavesReferenceList[2]));
for(i = 0; i &lt;= bossDifficulty; i += 1;) {
    do{
        objToSpawnNear = ds_list_find_value(slavesList, irandom(ds_list_size(slavesList) - 1));
        randIntDir = irandom(3);
        considerX = objToSpawnNear.x;
        considerY = objToSpawnNear.y;
        if(randIntDir == 0)
            considerY -= 16;
        else if(randIntDir == 1)
            considerX += 16
        else if(randIntDir == 2)
            considerY += 16;
        else if(randIntDir == 3)
            considerX -= 16; } until(place_empty(considerX, considerY))
    ds_list_add(slavesList, instance_create(considerX, considerY, slavesReferenceList[randIntDir])); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>while(ds_list_size(slavesList) &gt; 0)
    with(ds_list_find_value(slavesList, 0))
        instance_destroy(); //they remove themselves from the list

ds_list_destroy(slavesList);
with(obj_player) {
    max_hp+=5;
    hp+=5; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var heldInstance,minTargetDistance, targetDistance, instance;//NEW PLAN
minTargetDistance = 906;
for(i = 0; i &lt; ds_list_size(slavesList); i += 1) {
    instance = ds_list_find_value(slavesList, i);
    xl = instance.x;
    yl = instance.y;
    targetDistance = point_distance(obj_player.x-instance.target_xmod , obj_player.y-instance.target_ymod , xl, yl);
    if(targetDistance&lt;minTargetDistance) {
    heldInstance=instance;
    minTargetDistance=targetDistance;
    }}
    show_debug_message(string(minTargetDistance));
refX=instance.x;
refY=instance.y;
with(instance){
IAmTheBruteSquad=true;
event_perform(ev_alarm,1);
}
xChange=instance.x-refX;
yChange=instance.y-refY;
instance.x=refX;
instance.y=refY;
//should have intended motion now.    

//xmod=xChange;
//ymod=yChange;
//moveboolx = false;
//movebooly = false;
//for(i = 0; i &lt; ds_list_size(slavesList); i += 1) {
//    instance = ds_list_find_value(slavesList, i);
//    xl = instance.x;
//    yl = instance.y;
//    
//    moveboolx = (place_meeting(xl - xmod, yl, obj_wall) || place_meeting(xl - xmod, yl, obj_player)|| place_meeting(xl - xmod, yl - ymod, obj_wall)|| place_meeting(xl - xmod, yl - ymod, obj_player)||moveboolx);
//    movebooly = (place_meeting(xl, yl - ymod, obj_wall) || place_meeting(xl, yl - ymod, obj_player)|| place_meeting(xl - xmod, yl - ymod, obj_wall)|| place_meeting(xl - xmod, yl - ymod, obj_player)||movebooly);
//     }
//xl=x;
//yl=y;
//
//    moveboolx = (place_meeting(xl - xmod, yl, obj_wall) || place_meeting(xl - xmod, yl, obj_player)|| place_meeting(xl - xmod, yl - ymod, obj_wall)|| place_meeting(xl - xmod, yl - ymod, obj_player)||moveboolx);
//    movebooly = (place_meeting(xl, yl - ymod, obj_wall) || place_meeting(xl, yl - ymod, obj_player)|| place_meeting(xl - xmod, yl - ymod, obj_wall)|| place_meeting(xl - xmod, yl - ymod, obj_player)||movebooly);
//    show_debug_message(string(movebooly)+string(moveboolx));
//if(!moveboolx) {
xmod=xChange;
ymod=yChange;
//    for(i = 0; i &lt; ds_list_size(slavesList); i += 1) {
with(obj_slavered){x += obj_bossheart.xmod; y += obj_bossheart.ymod;}
with(obj_slaveblue){x += obj_bossheart.xmod; y += obj_bossheart.ymod;}
with(obj_slavegreen){x += obj_bossheart.xmod; y += obj_bossheart.ymod;}
with(obj_slaveyellow){x += obj_bossheart.xmod; y += obj_bossheart.ymod;}
    x += xmod; 
    y += ymod; 


////if(irandom(60)&lt;obj_timekeeper.difficulty){//playtesting complained that they had no agency against the boss, plus the bosses are designed to be danced around.
//var minTargetDistance, targetDistance, xl, yl, xmod, ymod, moveboolx, movebooly, pieceinway;
//minTargetDistance = 906;
//xmod = 0;
//ymod = 0;
//target_xmod=0;
//target_ymod=0;
//for(i = 0; i &lt; ds_list_size(slavesList); i += 1) {
//    instance = ds_list_find_value(slavesList, i);
//    xl = instance.x;
//    yl = instance.y;
//    targetDistance = point_distance(obj_player.x , obj_player.y , xl - target_xmod , yl- target_ymod);
//    if(targetDistance&lt;minTargetDistance) {
//    show_debug_message(string(targetDistance-minTargetDistance)+"diff");
//        minTargetDistance = targetDistance;
//        target_xmod = instance.target_xmod;
//        target_ymod = instance.target_ymod;
////        pieceinway=collision_line(xl - target_xmod,yl - target_ymod,obj_player.x,obj_player.y,obj_enemyparent,true,true);
////        if(pieceinway!=noone){
////        if(target_xmod!=0)
////        target_xmod = pieceinway.target_xmod;
////        if(target_ymod!=0)
////        target_ymod = pieceinway.target_ymod;
//        //}
//        //if(point_distance(xl, yl, obj_player.x, obj_player.y) &lt; 320) {
//            if(yl &lt; obj_player.y + target_ymod)
//                ymod = 16;
//            if(yl &gt; obj_player.y + target_ymod)
//                ymod = -16;
//            if(xl &lt; obj_player.x + target_xmod){
//                xmod = 16; show_debug_message(string(xl-obj_player.x+target_xmod));}
//            if(xl &gt; obj_player.x + target_xmod){
//                xmod = -16; show_debug_message(string(xl-obj_player.x+target_xmod));
//                }
//            }
//             }// }
//
//moveboolx = false;
//movebooly = false;
//for(i = 0; i &lt; ds_list_size(slavesList); i += 1) {
//    instance = ds_list_find_value(slavesList, i);
//    xl = instance.x;
//    yl = instance.y;
//    
//    moveboolx = (place_meeting(xl - xmod, yl, obj_wall) || place_meeting(xl - xmod, yl, obj_player)|| place_meeting(xl - xmod, yl - ymod, obj_player)|| place_meeting(xl - xmod, yl - ymod, obj_player)||moveboolx);
//    movebooly = (place_meeting(xl, yl - ymod, obj_wall) || place_meeting(xl, yl - ymod, obj_player)|| place_meeting(xl - xmod, yl - ymod, obj_player)|| place_meeting(xl - xmod, yl - ymod, obj_player)||movebooly);
//     }
//xl=x;
//yl=y;
//
//    moveboolx = (place_meeting(xl - xmod, yl, obj_wall) || place_meeting(xl - xmod, yl, obj_player)|| place_meeting(xl - xmod, yl - ymod, obj_player)|| place_meeting(xl - xmod, yl - ymod, obj_player)||moveboolx);
//    movebooly = (place_meeting(xl, yl - ymod, obj_wall) || place_meeting(xl, yl - ymod, obj_player)|| place_meeting(xl - xmod, yl - ymod, obj_player)|| place_meeting(xl - xmod, yl - ymod, obj_player)||movebooly);
//    show_debug_message(string(movebooly)+string(moveboolx));
//if(!moveboolx) {
//    for(i = 0; i &lt; ds_list_size(slavesList); i += 1) {
//        instance = ds_list_find_value(slavesList, i);
//        instance.x += xmod; }
//    x += xmod; }
//if(!movebooly) {
//    for(i = 0; i &lt; ds_list_size(slavesList); i += 1) {
//        instance = ds_list_find_value(slavesList, i);
//        instance.y += ymod; }
//    y += ymod; }
//    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
